problem link:- 
https://www.geeksforgeeks.org/problems/integral-points-in-triangle5026/1


class Solution {
  
   
    
    public:
    class Point {
    public:
        long x, y;
        Point(long x, long y) : x(x), y(y) {}
    };
    
     long long int InternalCount(long long int p[], long long int q[],
                                long long int r[]) {
        // code here
         Point P(p[0], p[1]);
        Point Q(q[0], q[1]);
        Point R(r[0], r[1]);

        long boundary = boundaryPoint(P, Q) + boundaryPoint(Q, R) + boundaryPoint(R, P) + 3;

        long area = std::abs(P.x * (Q.y - R.y) + Q.x * (R.y - P.y) + R.x * (P.y - Q.y)) / 2;

        long internalPoints = area + 1 - boundary / 2;
        return internalPoints;
    }
   

    long boundaryPoint(Point p, Point q) {
        if (p.x == q.x) return std::abs(p.y - q.y) - 1;
        if (p.y == q.y) return std::abs(p.x - q.x) - 1;
        return gcd(std::abs(p.x - q.x), std::abs(p.y - q.y)) - 1;
    }

    long gcd(long a, long b) {
        if (b == 0) return a;
        return gcd(b, a % b);
    }
};
