Problem Link:-
https://codeforces.com/problemset/problem/380/C


#include "bits/stdc++.h"
#define faster ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll long long int
#define pb push_back
#define f(a) for(ll i = 0;i<a;i++)
#define ffor(i,a,b) for(ll i = a;i<b;i++)
#define rfor(i,a,b) for(ll i = a;i>b;i--)
#define sll set<ll>
#define mll map<ll,ll>
#define vll vector<ll>
#define pll pair<ll,ll>
#define mcl map<char,ll>
#define usll unordered_set<ll,ll>
#define umll unordered_map<ll,ll>
#define umcl unordered_map<char,ll>
#define pqg priority_queue<ll>
#define pqs priority_queue<ll,vll,greater<ll> >
#define T ll t; cin>>t; while(t--)
#define freeopen freopen("input.txt","r",stdin);
#define freeclose freopen("output.txt","w",stdout);
#define MOD 1000000007
#define setbits(x) __builtin_popcountll(x)
#define INF 1000000000000000000
#define all(x) x.begin(), x.end()
using namespace std;
ll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll modpower(ll x,ll y,ll m){if(y==0)return 1;ll p=modpower(x,y/2,m)%m;p=(p*p)%m;return (y%2==0)?p:(x*p)%m;}


ll power(ll a,ll b)
{
    ll ans = 1;
    while(b) {
        if(b&1) ans = ans * a;
        a = a * a;
        b >>= 1;
    }
    return ans;
}

bool isPrime(ll n)
{

    if (n <= 1)
        return false;
    if (n <= 3)
        return true;

    if (n % 2 == 0 || n % 3 == 0)
        return false;
 
    for (ll i = 5; i * i <= n; i = i + 6)
        if (n % i == 0 || n % (i + 2) == 0)
            return false;
 
    return true;
}
string s;

struct triplet{
    ll bal_count=0;
    ll op_count=0;
    ll cl_count=0;
} segtree[4000000];

// ll segtree[4000000];
void build_segtree(ll ind,ll low,ll high)
{
    if(low==high){
        if(s[low]=='(')
        {
            segtree[ind].op_count=1;
        }
        else if(s[low]==')')
        {
            segtree[ind].cl_count=1;
        }
        return;
    }
    ll mid=(low+high)/2;
    build_segtree((2*ind)+1,low,mid);
    build_segtree((2*ind)+2,mid+1,high);
    // seg[ind]=(ll)(seg[(2*ind)+1] & seg[(2*ind)+2]);
    ll bal_after_merge=min(segtree[2*ind+1].op_count,segtree[2*ind+2].cl_count);
    segtree[ind].bal_count=segtree[2*ind+1].bal_count+segtree[2*ind+2].bal_count+(2*bal_after_merge);
    segtree[ind].cl_count=segtree[2*ind+1].cl_count+segtree[2*ind+2].cl_count - bal_after_merge;
    segtree[ind].op_count=segtree[2*ind+1].op_count+segtree[2*ind+2].op_count - bal_after_merge;
    return;
}

struct triplet query(ll ind,ll low,ll high,ll l,ll r)
{
    if(low>=l && high<=r)
        return segtree[ind];

    struct triplet ans;
    if(high<l || low>r) return ans;

    ll mid=(low+high)/2;
    struct triplet left=query(2*ind+1,low,mid,l,r);
    struct triplet right=query(2*ind+2,mid+1,high,l,r);
    
    ll bal_after_merge=min(left.op_count,right.cl_count);
    ans.bal_count=left.bal_count+right.bal_count+(2*bal_after_merge);
    ans.cl_count=left.cl_count+right.cl_count - bal_after_merge;
    ans.op_count=left.op_count+right.op_count - bal_after_merge;
    return ans;
}

main()
{
    faster
    
    cin>>s;
    build_segtree(0,0,s.length()-1);
    ll m;
    cin>>m;
    while(m--)
    {
        ll l,r;
        cin>>l>>r;
        l--;r--;
        struct triplet ans=query(0,0,s.length()-1,l,r);
        cout<<ans.bal_count<<"\n";
    }
    
    
}

