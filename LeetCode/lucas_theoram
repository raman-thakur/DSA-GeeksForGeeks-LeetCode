problem link:-
https://leetcode.com/problems/check-if-digits-are-equal-in-string-after-operations-ii/description/

-->
when we have to find ncr mod p where p is not prime or mmi method could not work then we will apply lucas but range of n and r need to be small 
-->


class Solution {
public:


    int fact[10]={1,1,2,6,24,120,720,5040,40320,362880};

    int lucas_ncr(int n,int r)
    {
        if(r>n)
        return 0;

        return (fact[n]/(fact[r]*fact[n-r]));
    }


    int lucas_ncr_mod(int n,int r,int mod)
    {
        int ans=1;
        while(n>0 || r>0)
        {
            int a=n%mod;
            n/=mod;

            int b=r%mod;
            r/=mod;

            ans=(ans*(lucas_ncr(a,b)%mod))%mod;
        }
        return ans;
    }

    int nCkMod10(int n, int k) {
        int mod2Value = lucas_ncr_mod(n, k,2);
        int mod5Value = lucas_ncr_mod(n, k,5);
        for (int candidate = 0; candidate < 10; candidate++) {
            if (candidate % 2 == mod2Value && candidate % 5 == mod5Value)
                return candidate;
        }
        return 0;
    }


    bool hasSameDigits(string s) {
        int length = s.size();
        int n = length - 2;
        int weightedSumFirst = 0, weightedSumSecond = 0;
        for (int i = 0; i <= n; i++) {
            int coeff = nCkMod10(n, i);
            int d1 = s[i] - '0';
            int d2 = s[i + 1] - '0';
            weightedSumFirst = (weightedSumFirst + coeff * d1) % 10;
            weightedSumSecond = (weightedSumSecond + coeff * d2) % 10;
        }
        return (weightedSumFirst == weightedSumSecond);
    }
};
